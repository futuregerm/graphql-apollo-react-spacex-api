{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","logo.png","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","launches","map","LAUNCH_QUERY","Launch","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.415287a9.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\nimport {Link} from \"react-router-dom\";\n\nexport default function LaunchItem({\n  launch: { flight_number, mission_name, launch_date_local, launch_success },\n}) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h5>Mission: <span className={ classNames({\n            \"text-success\": launch_success,\n            \"text-danger\": !launch_success\n          })}>{mission_name}</span></h5>\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n          <p>Flight Number: {flight_number}</p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\"/> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\"/> = Fail\n      </p>\n    </div>\n  )\n}\n","import React, {Fragment} from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from \"./MissionKey\";\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nfunction Launches() {\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n  if (error) {\n    console.log(error)\n    return (\n      <p>\n        Error :( \n      </p>\n    );\n  }\n  return (\n    <Fragment>\n      <h2 className=\"display-5 my-3\">Launches</h2>\n      <MissionKey />\n      {\n        (() => {\n          return <Fragment>\n          {data.launches.map(launch => {\n            return <LaunchItem key={launch.flight_number} launch={launch} />\n          })}\n          </Fragment>\n        })()\n      }\n    </Fragment>\n  );\n}\n\nexport default Launches;\n","import React, { Fragment } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport default function Launch({ match }) {\n  let { flight_number } = match.params;\n  flight_number = parseInt(flight_number);\n\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n    variables: { flight_number },\n  });\n\n  if (loading) return <div>Loading...</div>;\n  if (error) {\n    console.log(error);\n    return <div>Error :(</div>;\n  }\n\n  const {\n    mission_name,\n    launch_year,\n    launch_success,\n    rocket: { rocket_id, rocket_name, rocket_type },\n  } = data.launch;\n\n  return (\n    <Fragment>\n      <h2 className=\"display-5 my-3\">\n        <span className=\"text-dark\">Mission:</span> {mission_name}\n      </h2>\n      <h4 className=\"mb-3\">Launch Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n        <li className=\"list-group-item\">\n          Laucnh Successful:{\" \"}\n          <span\n            className={classNames({\n              \"text-success\": launch_success,\n              \"text-danger\": !launch_success,\n            })}\n          >\n            {launch_success ? \"Yes\" : \"No\"}\n          </span>\n        </li>\n      </ul>\n      <h4 className=\"my-3\">Rocket Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n      </ul>\n      <hr/>\n      <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n    </Fragment>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.1e5a6ddc.png\";","import { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\nimport \"./App.css\";\nimport logo from \"./logo.png\";\n\nconst client = new ApolloClient({\n  uri: \"/grahpql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App container\">\n          <img\n            src={logo}\n            alt=\"SpaceX\"\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\n          />\n          \n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}